<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python基础模块学习</title>
    <link href="/2021/03/13/python%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/03/13/python%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>Python基础模块的了解和学习</p><span id="more"></span><h2 id="内置模块-😍"><a href="#内置模块-😍" class="headerlink" title="内置模块 😍"></a>内置模块 😍</h2><ol><li><p>time模块</p><ul><li>时间获取函数</li></ul> <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>print(time.time())  <span class="hljs-comment"># 获取当前时间戳</span><br>print(time.ctime()) <span class="hljs-comment"># 获取当前时间并以易读方式表示，返回字符串</span><br>print(time.gmtime()) <span class="hljs-comment"># 获取当前时间，表示为计算机可处理的时间格式,UTC时间，以格式化模板输出  &lt;UTC：协调世界时&gt;</span><br>print(time.asctime()) <span class="hljs-comment"># 未被定义，表示当前时间</span><br>print(time.localtime()) <span class="hljs-comment"># 输出当前时间，以格式化模板输出,本地时间</span><br></code></pre></div></td></tr></table></figure><p> 输出：  </p> <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">1615626615.496064<br>Sat Mar 13 17:10:15 2021<br>time.struct_time(tm_year=2021, tm_mon=3, tm_mday=13, tm_hour=9, tm_min=10, tm_sec=15, tm_wday=5, tm_yday=72, tm_isdst=0)<br>Sat Mar 13 17:10:15 2021<br>time.struct_time(tm_year=2021, tm_mon=3, tm_mday=13, tm_hour=17, tm_min=10, tm_sec=15, tm_wday=5, tm_yday=72, tm_isdst=0)<br></code></pre></div></td></tr></table></figure><ul><li>时间格式化</li></ul> <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>t = time.gmtime()<br>t1 = time.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,t)    <span class="hljs-comment"># 格式化时间</span><br>t2 = time.strptime(t1,<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)   <span class="hljs-comment"># 转化时间格式</span><br>print(t1,t2)<br></code></pre></div></td></tr></table></figure><p> 输出：  </p> <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">2021-03-13-08:26:17<br>time.struct_time(tm_year=2021, tm_mon=3, tm_mday=13, tm_hour=8, tm_min=45, tm_sec=48, tm_wday=5, tm_yday=72, tm_isdst=-1)<br></code></pre></div></td></tr></table></figure> <!-- 表格（table） --><p> <img src="https://resource.liangzai.online/notebook/20210313234205.png#pic_left" alt="1"></p> <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time    <span class="hljs-comment"># 返回一个CPU级别的精确时间计数，单位为秒</span><br>start = time.perf_counter()<br>time.sleep(<span class="hljs-number">3</span>)    <span class="hljs-comment"># 模拟休眠，可以是浮点数。推迟调用线程的运行，可通过参数 secs 指秒数，表示进程挂起的时间。</span><br>end = time.perf_counter()<br>print(end - start)<br></code></pre></div></td></tr></table></figure><p> 输出：  </p> <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">3.004556<br></code></pre></div></td></tr></table></figure><blockquote><p>perf_counter()适合小一点的程序测试，会计算sleep()时间。<br>time()精确度不高，而且受系统影响，适合表示日期或者大程序的计时。</p></blockquote><hr></li><li><p>os模块</p><ul><li>os模块</li></ul> <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>os.listdir(<span class="hljs-string">&quot;path&quot;</span>)[:]  <span class="hljs-comment"># 返回一个列表。列表为给定目录下所有文件和子目录，但不包含特殊目录 . 和 ..。默认为当前目录。</span><br>os.makedirs(<span class="hljs-string">&quot;path&quot;</span>)  <span class="hljs-comment"># 递归方式创建路径为 path 的目录。并以数字形式指定目录权限，默认权限为 777 。可以看作功能更强大的 mkdir，它会自动创建叶子节点目录的所有上级目录，而 mkdir 必须在上级目录已经存在情况下，才能创建叶子节点的目录。</span><br>os.rmdir(<span class="hljs-string">&quot;path&quot;</span>)  <span class="hljs-comment"># 删除目录。目录必须存在，并且只能删除空目录。不存在或不为空，都会异常。要想递归删除整个目录树，请使用 shutil.rmtree()。</span><br>os.removedirs(<span class="hljs-string">&quot;parent/child/newdir&quot;</span>)  <span class="hljs-comment"># 递归删除目录。目录必须存在，并且只能删除空目录。不存在或不为空，都会异常。与 rmdir 不同的是，在删除了叶子节点目录后，会逐次删除上级目录，直到遇到不为空的目录。</span><br>os.remove(<span class="hljs-string">&quot;dog.copy.jpeg&quot;</span>)  <span class="hljs-comment"># 删除文件。不能删除目录，给定路径必须为文件，否则会异常。</span><br>os.getenv(<span class="hljs-string">&quot;PATH&quot;</span>)  <span class="hljs-comment"># 获取环境变量。  getenv(key, default=None)</span><br>os.get_exec_path(<span class="hljs-string">&quot;path&quot;</span>)  <span class="hljs-comment"># 返回用于搜索可执行文件的目录列表。看以看作是 PATH 环境变量的列表形式。</span><br>os.rename(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;newname&quot;</span>)  <span class="hljs-comment"># 重命名文件</span><br>os.remove()  <span class="hljs-comment"># 删除文件</span><br>os.getcwd()  <span class="hljs-comment"># 获取当前工作路径</span><br>os.walk()    <span class="hljs-comment"># 遍历目录</span><br>os.chdir()   <span class="hljs-comment"># 改变当前工作目录</span><br></code></pre></div></td></tr></table></figure><ul><li>os.path模块</li></ul> <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">os.path.join()  <span class="hljs-comment"># 连接目录与文件名</span><br>os.path.split() <span class="hljs-comment"># 分割文件名与目录</span><br>os.path.abspath()  <span class="hljs-comment"># 获取绝对路径</span><br>os.path.dirname()  <span class="hljs-comment"># 获取路径</span><br>os.path.basename() <span class="hljs-comment"># 获取文件名或文件夹名</span><br>os.path.splitext() <span class="hljs-comment"># 分离文件名与扩展名</span><br>os.path.isfile()   <span class="hljs-comment"># 判断所给出的路径是否是一个文件</span><br>os.path.isdir()    <span class="hljs-comment"># 判断给出的路径是否是一个目录</span><br></code></pre></div></td></tr></table></figure><hr></li><li><p>json模块</p><ul><li>dumps和dump</li></ul> <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-comment"># json.dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding=&quot;utf-8&quot;, default=None, sort_keys=False, **kw)</span><br><span class="hljs-comment"># 将 Python 对象编码成 JSON 字符串</span><br>data = [ &#123; <span class="hljs-string">&#x27;a&#x27;</span> : <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span> : <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span> : <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;d&#x27;</span> : <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;e&#x27;</span> : <span class="hljs-number">5</span> &#125; ]<br>data2 = json.dumps(data)<br>data3 = json.dumps(&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">&#x27;Runoob&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">7</span>&#125;, sort_keys=<span class="hljs-literal">True</span>, indent=<span class="hljs-number">4</span>, separators=(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;: &#x27;</span>))<br>print(data2,data3,sep=<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-comment"># 使用 dumps（）：将可以转换为 json 对象的对象转换为 String，然后可通过字符流或字节流写入文件</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_conf</span>(<span class="hljs-params">confiuration_path, pre_trans_obj</span>):</span><br><span class="hljs-comment">#先用dunps转为string，然后字符流写入</span><br><span class="hljs-comment">#ensure_ascii=False, 减少乱码</span><br>    json_string = json.dumps(pre_trans_obj, ensure_ascii=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(confiuration_path,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(json_string)<br><br><span class="hljs-comment"># 使用 dump（）：将可转为 json 对象的对象直接写入文件（将两个步骤结合成一个步骤）</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_conf</span>(<span class="hljs-params">confiuration_path, pre_trans_obj</span>):</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>（confiuration_path,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        json.dump(pre_trans_obj, f, ensure_ascii=<span class="hljs-literal">False</span>)<br><br></code></pre></div></td></tr></table></figure><p> 输出：</p> <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[&#123;<span class="hljs-string">&quot;a&quot;</span>: 1, <span class="hljs-string">&quot;b&quot;</span>: 2, <span class="hljs-string">&quot;c&quot;</span>: 3, <span class="hljs-string">&quot;d&quot;</span>: 4, <span class="hljs-string">&quot;e&quot;</span>: 5&#125;]<br>&#123;<br><span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-string">&quot;Runoob&quot;</span>,<br><span class="hljs-string">&quot;b&quot;</span>: 7<br>&#125;<br></code></pre></div></td></tr></table></figure> <!-- 表格（table） --><p> <strong>Python原始类型向Json类型的转换对照表：</strong></p><table><thead><tr><th align="center">Python</th><th align="center">Json</th></tr></thead><tbody><tr><td align="center">dict</td><td align="center">object</td></tr><tr><td align="center">list,tuple</td><td align="center">array</td></tr><tr><td align="center">str,unicode</td><td align="center">string</td></tr><tr><td align="center">int,long.float</td><td align="center">number</td></tr><tr><td align="center">True</td><td align="center">true</td></tr><tr><td align="center">False</td><td align="center">fasle</td></tr><tr><td align="center">None</td><td align="center">null</td></tr></tbody></table><ul><li>loads和load</li></ul> <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-comment"># json.loads(s[, encoding[, cls[, object_hook[, parse_float[, parse_int[, parse_constant[, object_pairs_hook[, **kw]]]]]]]])  </span><br><span class="hljs-comment"># 用于解码 JSON 数据。该函数返回 Python 字段的数据类型。</span><br>jsonData = <span class="hljs-string">&#x27;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5&#125;&#x27;</span>;<br>text = json.loads(jsonData)<br>print(text)<br><br><span class="hljs-comment"># 加载配置，configuration_path：配置文件路径</span><br><span class="hljs-comment"># 使用 loads（string）：作用将 string 类型转为 dict 字典或 dict 链表</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_conf</span>(<span class="hljs-params">configuration_path</span>):</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(configuration_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        string = f.read()<br>    <span class="hljs-keyword">return</span> json.loads(string)<br><br><span class="hljs-comment"># 使用 load（file_stream）：作用从文件流直接读取并转换为 dict 字典或 dict 字典链表</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_conf</span>(<span class="hljs-params">configuration_path</span>):</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(configuration_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = json.load(f)<br>    <span class="hljs-keyword">return</span> data<br></code></pre></div></td></tr></table></figure><p> 输出：</p> <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&#123;<span class="hljs-string">&#x27;a&#x27;</span>: 1, <span class="hljs-string">&#x27;b&#x27;</span>: 2, <span class="hljs-string">&#x27;c&#x27;</span>: 3, <span class="hljs-string">&#x27;d&#x27;</span>: 4, <span class="hljs-string">&#x27;e&#x27;</span>: 5&#125;<br></code></pre></div></td></tr></table></figure><p> <strong>Python原始类型向Json类型的转换对照表：</strong></p><table><thead><tr><th align="center">Json</th><th align="center">Python</th></tr></thead><tbody><tr><td align="center">object</td><td align="center">dict</td></tr><tr><td align="center">array</td><td align="center">list</td></tr><tr><td align="center">string</td><td align="center">unicode</td></tr><tr><td align="center">number(int)</td><td align="center">int,long</td></tr><tr><td align="center">number(real)</td><td align="center">float</td></tr><tr><td align="center">true</td><td align="center">True</td></tr><tr><td align="center">false</td><td align="center">False</td></tr><tr><td align="center">null</td><td align="center">None</td></tr></tbody></table><ul><li>大 JSON 字符串</li></ul> <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tempfile<br>data = [&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;rocky&#x27;</span>,<span class="hljs-string">&#x27;like&#x27;</span>:(<span class="hljs-string">&#x27;python&#x27;</span>,<span class="hljs-string">&#x27;c++&#x27;</span>),<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">23</span>&#125;]<br>f = tempfile.NamedTemporaryFile(mode = <span class="hljs-string">&#x27;w+&#x27;</span>)<br>json.dump(data,f)<br>f.flush()<br>print(<span class="hljs-built_in">open</span>(f.name,<span class="hljs-string">&#x27;r&#x27;</span>).read())<br></code></pre></div></td></tr></table></figure><p> 输出：</p> <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;rocky&quot;</span>, <span class="hljs-string">&quot;like&quot;</span>: [<span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;c++&quot;</span>], <span class="hljs-string">&quot;age&quot;</span>: 23&#125;]<br></code></pre></div></td></tr></table></figure><blockquote><p>Python 中提供了一个 tempfile 的模块来解决json数据量大时内存溢出的问题</p></blockquote><hr></li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-python -基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习记录</title>
    <link href="/2021/03/08/Linux%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/03/08/Linux%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux基础知识"><a href="#Linux基础知识" class="headerlink" title="Linux基础知识"></a>Linux基础知识</h2><span id="more"></span><ol><li><p>linux系统组成：内核、Shell、文件管理系统和应用程序。  </p><blockquote><p>内核：运行程序和管理磁盘和打印机等硬件设备的核心<br>Shell：是系统的用户界面，提供了用户与内核进行交互操作的一种接口，接受用户输入的命令并把它送入到内核中去执行。<br>文件系统：是文件存放在磁盘等存储设备上的组织方法<br>应用程序：程序集  </p></blockquote></li><li><p>linux发行版本  </p><ul><li>RedHat  </li><li>Fedora（由Redhat发展而来）  </li><li>Debian  </li><li>Ubuntu（基于Debian）  </li><li>Slackware</li><li>OpenSUSE</li></ul></li></ol><h2 id="Shell的基本运用"><a href="#Shell的基本运用" class="headerlink" title="Shell的基本运用"></a>Shell的基本运用</h2><h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><ol><li><p>Shell简介  </p><p> Shell是Linux的一个特殊程序，是内核与用户的接口，是命令语言、命令解释器及程序设计语言的统称。是一个命令语言解释器，拥有自己的Shell命令集，也能被系统中其他应用程序调用。</p></li><li><p>Shell终端  </p></li></ol><ul><li><p>Shell命令提示符</p><div class="hljs code-wrapper"><pre><code class="bash">[root@localhost ~]#   超级用户的命令提示符[name@localhost ~]$   普通用户name的命令提示符</code></pre></div><p>  @之前的为已登陆的用户名，以后的为计算机的主机名，默认为localhost，其次为当前目录名。（~表示用户主目录）</p></li><li><p>Shell命令格式</p><p>命令名 [选项] [参数]</p><ul><li>命令名是描述该命令功能的英语单词或缩写；</li><li>选项是执行该命令的限定参数或者功能参数,通常以’-‘开头，当有多个选项时，可以只使用一个该符号。部分选项以’–’开头，这些选项通常是一个单词，还有少数命令的选项不需要’-‘符号；</li><li>参数是执行该命令所必须的对象，如文件、目录；  </li><li>在Shell中一行中可以键入多行命令，用’;’分隔。在一行命令后加’&#39;表示另起一行继续输入。使用Tab键可以自动补全。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础</title>
    <link href="/2021/03/06/python%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/03/06/python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>计算机学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pythoh</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
